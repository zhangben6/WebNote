1. Javascript 概述
	1. 浏览器解释型语言,嵌套在HTML文件中交给浏览器解释和执行.
	2. 作用 : 实现用户交互(键盘或者鼠标操作);实现页面动效;小游戏制作等.
	3. 组成 :
		1. 核心语法 (ECMAScript)
		2. BOM : Browser Object Model,浏览器对象模型,提供一系列与浏览器相关的属性和方法
		3. DOM : Document Object Model 文档对象模型,提供一系列操作页面的属性和方法
		4. 自定义对象
2. JS的使用
	1. 元素绑定事件
		事件 : 所有用户的行为都称为事件
		事件处理函数 :
			对应用户的行为,JS中所做的操作
			onclick 单击事件
		语法 :
			<标签名 事件名="JS代码">
		JS语句 :
			alert("Hello world"); //网页弹框
			console.log("控制台输出");
	2. 在文档中嵌入JS代码,使用<script></script>
	   注意 :
	   	脚本标签在文档中可以书写任意多次,出现在任意位置,但是不同的位置有可能影响执行结果.
	   语法 :
	   		<script>
	   			JS 语句
	   		</script>
	3. 外部的JS文件
		创建.js文件,在HTML中通过<script src=""></script>引入
		注意 : 引入外部JS文件时,脚本标签中不能再书写JS代码
		输出语句 :
			prompt(""); 带有输入框的弹框,可以接受用于输入,并返回
			document.write(""); 在页面中写入内容,可以识别HTML标签;
			注意 :
				1. document.write()代码的书写位置,决定了内容在body中的添加位置
				2. 事件处理时书写的document.write(),会造成页面重写,点击会造成刷新
		练习 :
			1. 使用元素绑定事件的方式,为button标签添加单击事件,点击时在控制台输出"第一个JS代码"
				<button onclick="console.log('');">点击</button>
			2. 使用内嵌的方式,在页面中写入一级标题,内容不限
				<script>
					document.write("<h1></h1>");
				</script>
			3. 外链方式给提示框
				<script src=""></script>
3. JS 基础语法规范
	1. JS代码是由语句组成的,语句可以由变量,常量,运算符,关键字,函数等组成
	2. JS代码中语句的结束以;为标志,可以省略
	3. JS代码严格区分大小写
		Console.log(); //错误
		consolo.log(); //错误
	4. 所有的标点都是英文标点
	5. 注释 :
		单行 : //单行注释
		多行 : /* 多行注释 */

4. JS的变量与常量
	1. 变量
		1. 变量表示在程序运行期间随时可以修改的数据
		2. 变量创建 :
			JS 变量使用 var 关键字表示
			语法 :
				var a; //变量声明,自定义变量名
				a = 100; //变量赋值
				var b = 200; //声明并赋值
				var m,n,k; //同时声明多个变量
				var s=10,y=20;//声明并赋值多个变量
		3. 变量的命名规范
			1. 可以由数字,字母,下划线,$组成,禁止以数字开头;
			2. 禁止与关键字或保留字冲突(var const function class if do while for break continue name)
			3. 变量以小写字母开头,尽量见名知意,多个单词组成的变量名,采用小驼峰
				例 : 
					var userName;
					var username;
			4. 变量名严格区分大小写
		4. 输出变量
			var a = 100;
			console.log(a,b,'');
			alert(a); //接收一个参数
			prompt(a);
			document.write('<h1>'+a+'</h1>');
		5. 变量使用注意 :
			1. 声明变量时,可以省略关键字var,会影响变量的作用域,谨慎使用
			2. 变量使用var声明,但是未赋值,默认值为undefined
			3. 如果变量既省略关键字,又未赋值,直接使用会报错
				console.log(e); //error
	2. 常量
		1. 一经声明就无法修改的数据
		2. 语法 :
			常量使用关键字 const 声明,必须声明的同时赋值;为了与变量区分,常量名采用全大写字母表示
			例 :
				const PI = 3.14;
			注 : 强制修改常量,会报错	
		3. 练习 :
			自定义半径(变量),定义圆周率(常量),计算圆的周长和面积,控制台输出结果
		4. 小数位设置
			toFixed(n);
			保留小数点后n位
			例 :
				var a = 62.80000000004;
				a = a.toFixed(2);
5. JS数据类型
	1. 简单数据类型
		1. number 数值类型
			1. 整数
				1. 十进制表示
					var a = 10;
				2. 八进制表示
					八进制数据以0开头,采用0-7八位数字表示
					var a = 010; //0*8(0)+1*8(1)
					控制台一律转成十进制输出
				3. 十六进制表示
					十六进制表示整数,以0x为前缀
					var b = 0x35; //5*16(0) + 3*16(1)
			2. 小数
				1. 小数点计数法 3.14
				2. 指数计数法 1.5e3
					1.5 * 10(3)
					e表示10为底,3表示10的次方数
		2. string 字符串类型
			字符串由一个或多个字符组成,使用引号表示,每位字符都有对应的Unicode码值
			1. 语法
				var s = '100';
				var a = 100;
			2. 查看字符对应的Unicode码值
				方法 : charCodeAt(index);
				参数 : 字符串默认为每个字符分配下标,从0开始.参数传入下标,获取指定位置的字符编码
				使用 :
					var s1 = "hello";
					s1.charCodeAt(0);
			3. 已知中文的Unicode码,转换为字符,中文在计算机中以十六进制存储
				方法 : toString(16); //转换为16进制
				十六进制字符串转换汉字时, 需要添加\u转义字符
			4. 中文范围
				"\u4e00" ~ "\u9fa5"
			5. 转义字符
				\n  : 换行
				\t  : 制表符
				\\  : 表示\
				\"  : 表示"
		3. boolean 布尔类型
			布尔类型的结果只有真和假 true/false
			var isTrue = true;
			转换成数值true=1,false=0;
		4. undefined
			1. 变量声明未赋值时, 默认为undefined
			2. 访问对象不存在的属性,默认也为undefined
		5. null 空类型
	2. 复杂(引用)数据类型				
		对象,由属性和方法组成的
	3. 检测数据类型
		运算符(关键字) : typeof 
		typeof a;
		typeof (code.toString(16));
6. 数据类型转换
	不同类型的数据进行运算,需要转换类型
	1. 自动(隐式)类型转换
		1. 字符串与其他类型的数据结合,使用+号连接时,永远表示字符串的拼接
			转换规则 : 将非字符串类型的数据转换成字符串,后进行拼接,最终结果仍为字符串
		2. number + boolean
			转换 : 将非number类型的数据,转换成number,进行数学相加
			特殊 :
			//undefined首先转换number,返回NaN(not a number,转换失败)
			//10 + NaN = NaN
			var s2 = 10 + undefined;
			var s3 = 10 + null; //10,null转number,转为0
		3. boolean + boolean
			布尔类型参与数学运算,会自动转换成number

	2. 强制类型转换
		1. 转换字符串类型
			方法 : toString();
			将任意类型的数据转换成字符串类型
			例 :
				var a = 100;
				var a1 = a.toString();
				console.log(a,typeof a);
				console.log(a1,typeof a1);
		2. 转换number类型
			1. Number(param)
				将任意类型的数据转换成number类型
				参数 : 需要类型转换的数据
				返回 : 返回转换结果,成功则返回number值,失败返回NaN
				例 :
					var s1 = Number("35.5");//35.5
					var s2 = Number(true);//1
					var s3 = Number("18a"); //NaN
			2. parseInt(param)
				解析字符串中的number数据(只保留整数)
				过程 :
					1. 如果参数非字符串,自动转换成字符串类型
					2. 从左至右,对每一位字符串进行转number的操作,当前位转换失败则停止向后解析,直接返回结果
				例 :
					var s1 = parseInt(35.5);
					var s2 = parseInt("18.5a");
					var s3 = parseInt("a18");//NaN
			3. parseFloat(param)
				解析字符串中的number数据,包含小数部分
				例 :
					var s1 = parseFloat("35.5");
					var s2 = parseFloat("18.5a");
					//9.3
					var s3 = parseFloat("9.3.5a");
7. 运算符
	1. 赋值运算符 =
		将赋值符号右侧的值赋给左边的变量
		var a = 100;	
	2. 算数运算符
		+ - * / %(取余)	
		1. 所有涉及字符串参与的+运算,全都是字符串拼接.
			例 :
				var s1 = "10" + true;
		2. 非字符串类型参与算数运算,统一转换成number(自动转换),后进行计算.
		字符串类型再进行除+以外的其他运算时,也先转换number再进行计算
	3. 自增/自减运算符 ++ --
		1. 变量使用++/--,表示在自身基础上+1/-1
			var a = 10;
			a ++; // a += 1; a = a + 1;
			console.log(a);
		2. 使用 :
			1. 单独与变量结合,做前缀或做后缀,没有区别
			2. 与其他运算符结合使用时,前缀和后缀影响计算结果;做前缀,先++/--,后结合其他运算;做后缀,先结合其他运算符,最后再++/--
		3. 思考 :
			var n = 5;
			var r = n++ + ++n + n++ + ++n +n;
			解 :
				表达式1 : r1 = n++; //r1=5,n=6
				表达式2 : r2 = ++n; //r2=7,n=7
				表达式3 : r3 = n++; //r3=7,n=8
				表达式4 : r4 = ++n; //r4=9,n=9
				表达式5 : r5 = n; 	//r5=9,n=9
				r = 5 + 7 + 7 + 9 + 9;























