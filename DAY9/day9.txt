函数:
    1.作用:保存一段待执行的代码
    2.函数的语法:
        1.函数声明
            封装代码段
            function 函数名(参数列表){
                函数体
                return 返回值;
            }

        2.函数调用
            执行代码段
            函数名()
    3.注意:
        1.函数名自定义,见名知意,命名规范参照变量,普通函数使用小写字母开头
        2.参数的小括号不能省略,多个参数之间使用逗号隔开
        3.return关键字用于将函数内部的结果返回给外界使用,只能返回一个值(表达式),外界通过定义变量来接收
          return关键字后面的代码都不执行,所以return写在函数体末尾
        4.其他声明和使用方式:
            1.使用变量保存匿名函数
                var fun = function(){}
                fun();
            2.匿名函数自执行
                (function(){})(参数);
        5.变量的作用域
            1.全局作用域
                在函数外部定义的变量都是全局作用域中的变量,在任何地方都可以访问
                所有省略var关键字创建的变量都是全局变量
            2.函数作用域
                在函数内部使用var关键字定义的变量都是局部变量,只在当前函数体中可以访问,外界无法使用
            3.作用域链
                函数作用域中访问变量,首先从自身作用域中查找,查找失败,向外层作用域中查找变量,依次类推,直至全局作用域

2.内置对象
    1.对象由静态属性和动态方法组成
    2.数组 Array
        1.按照顺序存储一组数据
        2.创建数组
            1.使用[]表示数组结构,数据使用逗号隔开
                例:
                    var arr1 = [1,2,3];
            2.使用 new 关键字,根据类型 Array,创建具体的对象
                例:
                    var arr2 = new Array(10,20,30);
                    var arr3 = new Array(5);
                注:
                    使用new关键字创建数组是,如果只传递一个整数作为参数,表示初始化数组长度(预分配,可以动态修改),而不是元素
        3.操作数组元素
            1.数组会自动为元素分配下标,默认从0开始
            2.通过元素下标实现对数组元素的读取
                语法:
                    arr[下标] = 10;
        
        4.遍历数组元素
            属性: lenth 表示数组长度,元素个数,通过点语法访问
            语法:
                for(var i=0;i<arr.lenth;i++){
                    console.log(arr[i])
                }
                //倒序for循环
                for(var j=arr.length-1;j>=0;j --){
                    console.log(arr[j])
                }
                
                //快速for循环  ---> for .. in 
                for(variable in array){
                    自定义变量variable表示数组下标
                }


        
        练习:   exercise1.html
            1.循环接收用户输入,将数据存储在数组中,制止用户输入exit表示结束舒茹茹,控制打印台打印数组元素
            2.声明包含若干数据的数组(number),求这一组数据中最大的值
            3.创建一个包含三个number数据的数组,按照从小到大的顺序排列输出
            4.声明数组包含若干元素(number),接收用户输入,查询用户输入的数据在数组中对用的小标,如果不存在返回-1
        
        5.属性与方法:
            1.属性length
                表示数组长度
            2.方法
                1.toString()
                    作用:讲述组转成字符串
                2.Join(param)
                    作用:将数组中的元素按照指定的符号链接,返回字符串
                    参数:可选,用于指定元素之间的连接符,默认为逗号
                3.reverse()
                    作用:反转数组,倒序重排
                    返回:数组,反转操作改变了原始数组的结构
                4. sort() 数组中元素的排序
                    作用:将数组中的元素按照***unicode***的码值升序排列
                    返回:数组,改变原始数组的存储顺序
                    参数:可选,自定义排序算法
                    e.g. 
                    function sortASC(a,b){
                        return a-b;
                    }
                    arr2.sort(sortASC);
                    console.log(arr2)
                    自定义升序排列的算法,对number按照值的大小升序排列:
                        1.参数a,b:代表数组中的两个元素,会自动传入相邻的两个元素进行比较
                        2.如果a-b>0,交换元素的位置,否则不变
                 5. push(data)
                        作用: 在数组的末尾添加一个或者多个元素,多个元素用逗号隔开
                        返回: 数组最新的长度
                    6. pop()
                        作用: 删除数组中末尾元素
                        返回: 被删除的元素
                    7. unshift(data)
                        作用: 在数组的头部添加一个或者多个元素
                        返回: 修改之后数组的长度
                    8. shift()
                        作用: 删除数组中头部元素
                        返回: 被删除的元素
                    9. forEach(function)
                        作用: 遍历数组元素
                        参数: 通过函数,获取数组中元素,执行相关的操作
                        过程: 从数组中每取出一个元素,将元素和其对应的下标,传入函数,自动执行,
                                函数接受两个参数,分别表示元素和下标,
                                如果只定义一个形参,那只接受元素
                                var res5 = arr2.forEach(function(elem,index){
                                        console.log(elem,index);
                                       })
            6. 二维数组
                1. 数组中的没个元素又都是数组结构
                2. 语法
                    var arr = [[1,2], [3,4], [5,6,7]];
                3. 读取元素:
                    var arr2 = arr[0];
                    var num = arr2[0];
                

                

            
