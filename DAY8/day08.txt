复习 :
1. JS引入方式
	1. 事件绑定
		<div onclick="JS 语句"></div>
	2. 使用<script></script>标签
	3. <script src=""></script>
2. 输出语句
	alert();
	prompt();
	console.log();
	document.write();
3. 变量与常量
	var a = 100;
	const PI = 3.14;
4. 数据类型
	number string boolean undefined null
5. 数据类型转换
	1. 自动
		15 + "10"  //"1510"
		10 + 5 + "5" //"155"
		"10" + true //"10true"
		10 + "10" + true //"1010true"
		10 + true + "10" //"1110"
		10 + undefined //NaN
		"10" + null //"10null"
		true + false //1
	2. 强制
		1. 任意类型转换字符串
			toString();
			例 :
				var a = true;
				var a1 = a.toString();//"true"
		2. 任意类型转换number
			1. Number(param)
				例 :
					Number("50.4");//50.4
					Number("50a");//NaN
					Number(true);//1
			2.parseInt(param)
				例 :
					parseInt(35.5);//35
					parseInt("35.5a")//35
					parseInt("a35.5")//NaN
			3. parseFloat(param)
				例 :
					parseFloat("35.5.3");//35.5
6. 运算符
	1. 赋值运算符
	2. 算数运算符 + - * / %
		例 :
			"10" - 5 ; //5
			"10a" - 5; //NaN
			"10" + true;
			"10" - true;//9
	3. 复合运算符
		+= -= *= /= %=
		例 :
			var a = 10;
			a += 5; // a = a + 5;
	4. 自增,自减 ++ --
		1. 单独使用放前或放后没有区别
			例 :
				var a = 10;
				a ++;
				++ a;
				5 ++; //error
				const A = 5;
				A ++; //error
			注 :
				自增和自减运算只能变量使用,常量无法修改
		2. 与其他运算符结合使用
			例 :
				var n = 10;
				var r = n ++ + ++n;
-------------------------------------------------
day 08
1. 运算符
	1. 比较运算符(关系运算符)
		> >= < <= ==(相等) !=(不等) 
		===(恒等) !==(不恒等)
		1. 比较运算符用来判断表达式之间的关系,结果为布尔类型
		2. 分类
			1. number 与其他类型之间的比较
				过程 : 将非number数据转换成number,再进行比较
				注意 : NaN 与任意数据比较,结果都为false
			2. 字符串之间的比较
				1. 字符串之间比较,不会再数据类型转换
				2. 从前往后,依次比较每位字符的Unicode码
				例 :
					var r = "2" > "10";
					var r = "20" > "21";
			3. 字符串与布尔类型的比较
				例 :
					"10" > true //true
					"10a" > true //false
				注 : 先转number再比较
		3. 相等与全等
			1. 相等:包含自动类型转换,只要值相等,就成立
				例 :
					"10" == 10  //true
					"10" != 10  //false
			2. 全等:不会进行自动类型转换,要求类型一致,值相等,才视为成立
				例 :
					"10" === 10  //false
					"10" !== 10  //true
	2. 逻辑运算符
		1. 将多个条件表达式的结果组合成最终单一的布尔值
		2. 分类 :
			1. && :逻辑与
				两个表达式都成立,最终结果才成立,为true. (全1则1)
				例 :
					5 > 3 && "10" >"2" //false
					true && false
			2. || :逻辑或
				两个表达式中只要有一个成立,最终结果都为true. (有1则1)
				例 :
					5 > 3 || "10" >"2" //true
			3. ! :逻辑非
				对布尔结果取反操作
				非真即假,非假即真.
				例 :
					!(5 > 3) //false
					!false   //true
					!5		//false
				注 : 除零值以外的所有值都为真,零值为假
			练习 :
				1. 接收输入的年份,检测数据类型;
				   判断该年份是否是闰年,在控制台输出结果
				   闰年 :
				   	1. 能被 400 整除
				   	2. 能被4整除,但是不能被100整除
				2. 接收用户输入一个字符,判断输入的内容
				是数字吗 ? 
				是字母吗 ?
				是中文吗 ?
	3. 位运算
		1. 数据在计算机中是以二进制存储的,位运算是指直接对二进制位操作
		2. 分类 :
			1. 位与 : &
				将操作数转换成二进制形式,按位进行与操作
				例 : 
						3 	&  5 = 1
						011
					&	101
					---------
						001  -> 1
				注 : 任何整数与1做位与,可以判断奇偶.结果为1,操作数为奇数;结果为0,操作数为偶数
					例 :
						3 & 1 //011 & 001 = 001
						2 & 1 //010 & 001 = 000
			2. 位或 : |
				对二进制位进行或操作,有1则1
				例 :
					 3 | 5 //011 | 101 = 111
			3. 异或 : ^
				比较二进制位,相同为0,不同为1
				例 :
					3 ^ 5 //011 ^ 101 = 110
				注 :
					异或可以在不借助第三方变量的情况下,互换两个变量的值
					var a = 3;
					var b = 5;
					a = a ^ b; //110 = 6
					b = a ^ b; //110 ^ 101 = 011 3
					a = a ^ b; //110 ^ 011 = 101 5
	4. 三目运算符(三元)
		语法 :
			条件1 ? 表达式1 : 表达式2;
		过程 :
			判断条件1是否成立?
			成立,执行表达式1
			不成立,执行表达式2
			返回结果
		练习 :
			1. 成绩判定
				接收用户输入的成绩
				>=90  A
				80~90 B
				60~80 C
				<60   D
				判断等级并输出
			2. 身体指数 BMI
				bmi  = 体重(kg) / (身高 * 身高m);
				保留两位小数
				判断身体情况
				bmi > 23.9 该减肥了
				18.5 <= bmi <= 23.9 健康
				< 18.5 偏瘦
2. 流程控制
	1. 控制代码的执行顺序
	2. 分类 :
		1. 顺序结构
			自上而下,依次执行所有的代码语句
		2. 分支(选择)结构
			根据条件是否成立,选择执行某段代码
			1. if语句
				1. if(条件){
					条件成立时执行
				   }
					注 :
						1. {} 可以省略,省略之后,if条件满足时,只执行后面紧跟的一条语句
						2. 零值为假 :
							if(0){}
							if(0.00){}
							if(""){}
							if(NaN){}
							if(undefined){}
							if(null){}
							注意 :
								带有空格的字符串视为真
				2. if-else
					语法 : if(条件){
								//成立时执行
							}else{
								//条件不成立时执行
							}
					例 :
						var age = 20;
						if(age >= 18){
							console.log("一起开黑");
						}else{
							console.log("未成年人禁止入内");
						}
				3. 多重分支
					语法 :
						if(条件1){
							//条件1成立执行
						}else if(条件2){
							//条件2成立时执行
						}else if(){

						}else{

						}
				练习 :
					1. 使用if判断成绩等级
					2. 日期计算器,接收用户输入的年,月,日,判断当日是该年的第几天
			2. switch语句
				主要用来做值的匹配
				语法 :
					switch(变量){
						case 值1 :
							//匹配成功执行的代码段
							break; //结束匹配
						case 值2 :
							//匹配成功执行
							break;
						...
						default:
							console.log("匹配失败,默认执行的操作");
							break;
					}
				注意 :
					1. switch进行值的全等匹配,要求类型与值都一致,才能匹配成功
					2. case 用来列举所有可能的取值情况
					3. break用于结束匹配,可以省略;如果省略break,会从当前匹配到的case开始向后执行所有case中的代码
					4. 多个case可以共用代码段 :
							case '1' :
							case '3' :
							case '5' :
								alert("红烧肉");
								break;
					5. default 表示默认情况,写在最后,表示所有case都匹配失败最终执行的操作
				练习 :
					改版日期计算器
		3. 循环结构
			1. 重复执行某一段代码
			2. 循环三要素 :
				循环变量;
				循环执行的条件;
				循环体
			3. 分类 :
				1. while 循环
					语法 :
						循环变量;
						while(循环条件){
							循环体;
							更新循环变量
						}
					例 :
						var i = 1;
						while(i < 101){
							console.log("优秀");
							//更新循环变量
							i++;
						}
					执行流程 :
						1. 定义循环变量
						2. 判断循环条件
						3. 条件成立,执行循环体
						4. 循环体中更新循环变量,避免死循环
						5. 重复2-3-4,直到条件不成立,结束循环
					练习 :
						1. 控制台输出1-100之间所有的 整数
						2. 求1-100之间所有整数的和
						3. 控制台输出1-100之间所有3的倍数
						4. 改版日期计算器
				2. do-while 循环
					语法 :
						循环变量
						do{
							循环体
							更新循环变量
						}while(循环条件);
					执行流程 :
						1. 定义循环变量
						2. 执行循环体
						3. 更新循环变量
						4. 判断循环条件,条件成立,重复2-3-4;条件不成立,结束循环
					练习 :
						循环接收用户输入并在控制台输出,直到用户输入"exit",结束循环
					总结 :
						do-while 不管循环条件是否成立,至少执行一遍循环体;更适用于不确定循环次数的场合
						while 先判断后执行,更适用于明确循环次数的场合
				3. for 循环
					for(定义变量;循环条件;更新){
							循环体
						}
					例 :
					for(var i = 1; i < 101; i++){
							console.log(i);
					}
					循环控制 :
						1. break : 用于结束循环,后面的代码都不执行
						2. continue : 跳出本次循环,开始下一次循环
					循环嵌套 :
						在循环体中嵌套使用其他循环体
					练习 :
						1. 判断素数
							接收用户输入的一个数字,判断是否是素数
						2. 接收用户输入的年月日,判断星期几
							已知 : 1990年1月1日是星期一
							1900年1月1日是星期一
						3. 控制台输出图案
							一:
							*
							**
							***
							****
							*****
							二 :
								*
							   ***
							  *****
							 *******
							*********
						4. 九九乘法表




				







