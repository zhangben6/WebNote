1.背景相关属性
    1.背景颜色
        属性:background-color
        取值: 颜色值
        注意:
            1.所有的元素默认背景颜色为透明rgba(0,0,0,0),窗口显示的白色是浏览器自动渲染的,与元素本身无关
            2.背景颜色从边框位置渲染,包含内边距和元素尺寸区域
    2.背景图片相关
        1.背景图片设置
            属性:background-image
            取值:使用url方法来提供图片路径  url('路径')
            注意:
                1.路径加不加引号都可以,如果出现空格或者中文,必须加引号
                2.图片尺寸小于元素尺寸,浏览器会自动将背景图片重复平铺,填满元素
                3.图片尺寸大于元素尺寸,图片按照原始尺寸从边框位置显示,超出部分不可见

        2.背景图片重复方式
            默认水平和垂直两个方向重复平铺,填满元素
            属性: background-repeat
            取值:
                1.repeat 默认值
                2.repeat-x 沿水平方向重复平铺
                3.repeat-y 沿垂直方向重复平铺
                4. no-repeat 不重复平铺
        3.背景图片的尺寸设置
            属性:background-size
            取值:
                1. width height(px)
                2. %    %
                   百分比单位参照当前元素尺寸计算并调整背景图片大小
                3.cover 图片等比拉伸至足够大,完全覆盖父元素,超出部分裁剪不可见
                4.contain 图片等比拉伸至刚好被元素容纳,不改变图片的宽高比,不会超出尺寸元素,会出现填不满元素的情况
        
        4.背景图片的位置设置
            默认情况下,元素的内容或者背景图片都是从左上角显示的
            属性: background-position
            取值:
                1.x y(px)
                    分别表示水平和垂直偏移距离
                    正值表示向右或者向下移动
                    负值向左向上移动,一旦超出元素区域,超出部分不显示
        
                2.%  %
                    参照元素自身的宽高尺寸,计算偏移距离
                        1. 0% 0%
                            显示在左上角
                        2. 100% 100%
                            显示在元素的右下角
                        3. 50%  50%
                            显示在元素的正中间

                3.方位值
                    x y 代表水平和垂直方向
                        取值:
                            x:left/center/right
                            y:top/center/bottom
                        如果只设置一个方向的值,另外一个方向默认为center

                        精灵图技术:减少网络请求,节省资源,通常会将一组按钮不同状态下的小图片拼在一张图片上,通过一次网络请求得到,
                                  页面中借助background-position调整图标的显示
                
    3.背景属性简写
        属性:background
        取值: color url() repeat position
        注意:
            1.使用简写属性统一设置背景相关的样式时,遵照以上顺序书写
            2.属性值根据需要添加,没有必填项
            3.background-size是CSS3提供的属性,根据需要单独设置

2.文本相关属性
    1.字体样式
        1.设置字体大小
            属性:font-size
            取值:像素值/em
        2.指定字体名称
            属性:font-family
            取值:字体名称,多个名称之间使用逗号隔开;
            如果字体名称中出现中文或者空格,必须加引号
            例: font-family:Arial,'黑体','Microsoft Yahei';
        3.指定字体粗细
            属性: font-weight
            取值:
                normal(默认)
                bold(加粗)
                使用100~900之间的整百数值表示粗细程度
                400 -> normal
                700 -> bold
        4.指定字体样式(是否斜体或倾斜)
            属性:font-style
            取值:
                1.normal(默认正常显示)
                2.italic(斜体显示)
                3.oblique(字体倾斜显示)
            注意:
                oblique 默认情况下显示效果与italic一致,没有区别.一般讲oblique作
                为italic的备用样式.
        5.简写属性:
            属性: font
            取值:style weight size family
            注意:
                1.严格按照顺序书写
                2.size family 是必填项,不能省略
    2.文本样式
        1.文本颜色
            属性:color
            取值:颜色值
        2.文本的水平对齐方式:
            属性: text-align
            取值:left/center/right/justify(两端对齐)
            注意:
                1.用于块元素,在尺寸范围内设置文本内容的水平对齐
                2.两端对齐,浏览器会自动调整每一行字符之间的间距
        3.文本的垂直显示位置
            属性: line-height
            取值: 像素值
            使用:
                1.一行文本的垂直居中:
                    将行高设置与高度保持一致,元素尺寸范围内,只能显示一行.文本内容在
                    当前的行中永远垂直居中的,浏览器会自动分配上下空隙
                2.如果行高小于高度,文本显示在元素靠上的位置
                3.如果行高大于高度,文本显示在元素靠下的位置,可以通过行高对文本位置微调
            特殊:
                line-height可取无单位的数值,表示字体大小的倍数,依次来计算行高
                p{
                    font-size:16px;
                    line-height:2;
                /*表示行高为字体大小的两倍,32px  */
                }
        4.文本装饰线
            属性:text-decoration
            取值:
                1.underline     下划线
                2.overline      上划线
                3.line-through  删除线
                4.none          取消装饰线
        5.标签嵌套
            1.块元素中可以嵌套一切标签
                注意:
                    1.标题中只能嵌套段落或者行内元素
                    2.段落中只能嵌套行内元素

3.表格相关的属性
    1.表格式块元素,CSS属性是可以通用的
    2.table标签独有的css属性
        1.边框合并
            属性:border-collapse
            取值:
                1.separate(默认表格边框与单元格边框是分离状态)
                2.collapse 边框合并
        2.边框之间的距离
            属性: border-spacing
            取值: h  v;
                两个值分别设置水平方向边框之间的距离
                垂直方向边框之间的距离,取像素值
            注意: 必须在边框分离状态才能使用该属性
        3.表格尺寸
            1.table设置宽高,单元格后自动分配控件
            2.table固定宽高,指定某个单元格的尺寸,会影响单元格所在的行高和列宽
            3.如果需要统一设置所有单元格的尺寸,table就不能指定宽高了,让表格的尺寸由内容决定
4.css过滤效果
    1.不同状态下元素样式的改变,不再是瞬时完成,而是增加平滑过渡的效果
    2.属性:
        1.指定过渡时长
            transition-duration
            取值:以秒(s)或者毫秒(ms)为单位的数值
            1s = 1000ms

        2.指定过渡属性
            transition-property
            取值:
                1.all(所有的css属性)
                2.css属性名,属性名,属性名

        3.过渡效果的速度变化
            transition-timing-function
            取值:
                1.ease  默认值,慢速开始,中间快速的变快,慢速结束
                2.linear  匀速变化
                3.ease-in  慢速开始,加速结束
                4.ease-out  快速开始,慢速结束
                5.ease-in-out  慢速开始和结束,中间过程先加速后减速
        
        4.指定过渡效果延迟执行
            属性:transition-delay
            取值:时间值(s/ms)
        
        5.属性简写
            语法:
                transition:property duration timing-function delay

5.布局方式:
    1.设置元素在文档中的排列显示和位置
    2.分类:
        1.普通流布局/文档流布局/静态布局
            特点:按照元素类型和书写顺序,从上至下,从左到右,依次显示元素,是默认的布局方式
        2.浮动布局
            属性:float
            取值:left/right/none(默认)
            特点:
                1.元素设置浮动,会停靠在其他元素的边缘,left/right指定元素的浮动方向
                2.浮动元素会脱离文档流,在文档中不再占位,后面正常元素会向前占位,影响整体布局
                3.元素一旦脱离文档流,尺寸就由内容多少决定,可以手动调整宽高
                4.浮动会造成文字环绕效果,浮动元素不占位,悬浮在文档上方,有可能遮挡正常元素,正常
                元素中的内容会围绕在浮动元素周围显示
            问题:
                浮动元素不占位,导致父元素高度为0,影响布局,影响父元素背景图,背景色的显示
            作业:
                1.自定义导航栏,内容样式不限,要求导航项均匀分布,导航项之间有间隔
                2.登录页面

                        
                        


            


            
                    
                